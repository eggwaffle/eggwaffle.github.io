{"pageProps":{"allPostsData":[{"id":"nextjs-setup","title":"Next.js Setup","date":"2022-01-28","excerpt":" yarn create next-app nextjs-blog  --use-npm --example \"https://github.com/vercel/next-learn/tree/master/basics/learn-starter\"","body":"\nyarn create next-app nextjs-blog\n\n--use-npm --example \"https://github.com/vercel/next-learn/tree/master/basics/learn-starter\"\n\nyarn dev\nyarn build\nyarn start\n\n# TailwindCSS and SASS\nyarn add tailwindcss postcss-preset-env postcss-flexbugs-fixes\n\nIn root folder, create postcss.config.js and tailwind.config.js\nyarn add sass\n\n# Typescript\nTo get started, create an empty tsconfig.json file in the root of your project\n\nIf you’re using npm\nnpm install --save-dev typescript @types/react @types/node\n\nIf you’re using Yarn\nyarn add --dev typescript @types/react @types/node"},{"id":"ssg-ssr","title":"When to Use Static Generation v.s. Server-side Rendering","date":"2020-01-02","excerpt":" We recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.  You can use Static Generation for many types of pages, including:","body":"\nWe recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\n\nYou can use Static Generation for many types of pages, including:\n\n- Marketing pages\n- Blog posts\n- E-commerce product listings\n- Help and documentation\n\nYou should ask yourself: \"Can I pre-render this page **ahead** of a user's request?\" If the answer is yes, then you should choose Static Generation.\n\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data."},{"id":"pre-rendering","title":"Two Forms of Pre-rendering","date":"2020-01-01","excerpt":" Next.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.  - **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.","body":"\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others."}],"allProjectsData":[{"id":"project-1","title":"Project 1","order":"1","tags":["html","css"],"excerpt":" yarn create next-app nextjs-blog  --use-npm --example \"https://github.com/vercel/next-learn/tree/master/basics/learn-starter\"","body":"\nyarn create next-app nextjs-blog\n\n--use-npm --example \"https://github.com/vercel/next-learn/tree/master/basics/learn-starter\"\n\nyarn dev\nyarn build\nyarn start\n\n# TailwindCSS and SASS\nyarn add tailwindcss postcss-preset-env postcss-flexbugs-fixes\n\nIn root folder, create postcss.config.js and tailwind.config.js\nyarn add sass\n\n# Typescript\nTo get started, create an empty tsconfig.json file in the root of your project\n\nIf you’re using npm\nnpm install --save-dev typescript @types/react @types/node\n\nIf you’re using Yarn\nyarn add --dev typescript @types/react @types/node"},{"id":"project-2","title":"Project 2","order":"2","tags":["react"],"excerpt":" Next.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.  - **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.","body":"\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others."}]},"__N_SSG":true}